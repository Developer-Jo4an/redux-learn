#Полный курс Redux

Redux - это бибиотека для работы с состоянием приложения, state manager, некоторое хранилище
Проблематика: В огромных проектах некоторое состояние может быть понадобиться вообще в другой компонентной ветке, поэтому Redux
инкапсулирует состояние и дает доступ всем дочерним компонентам, не прибегаю к тому, что мы будем кучей прокидывать пропсы из родительского.

Работает это так:
- Существуют какой-то стэйт, корневой - это хранилище данных
- Существуют экшены - это дейсвтия, которые мы можем совершить с состоянием(добавить/удалить/копировать)
- Существует dispatch(диспетчер) - это функция, котора выполняет действие
- Существует reducer - это система, логика, которая описывает поведение action, в которую обращается диспетчер и по какому-то экшен меняет какое-либо сотояние

У нас получается цепочка:
State <-> reducer <-> actions <-> dispatch

Для начала работы необходимо установить библиотеки:
1) Redux - npm i redux(Установка непосредственно redux)
2) React Redux - npm i react-redux(Установка react-redux, чтобы связать наши react компоненты с redux)

Разработка:
- Теперь нужно создать store(корневой) - это и будет нашим хранилищем
У store есть несколько методов:
 --- getState(получить)
 --- dispatch(изменить)

 - Далее создаем reducer и defaultValue для store, чтобы указать начальное состояние и систему изменения состояния

 .........................................................................
const ADD_CASH = 'ADD_CASH'
const GET_CASH = 'GET_CASH'

const defaultState = {
	cash: 0
} // Дефолтное состояние

const reducer = (state, action) => {
	switch (action.type) {
		case ADD_CASH : {
			return { ...state, cash: state.cash + action.payload }
		}
		case GET_CASH : {
			return { ...state, cash: state.cash - action.payload }
		}
		default : return state
	}
} // Функция reducer, которая содержит логику изменения state в зависимости от action

const store = createStore(reducer, defaultState) // Store

...Компонент
 .........................................................................